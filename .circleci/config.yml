# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/flask-restapi-teamtreehouse

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - run:
          name: get ssh-key
          command: |
            wget -O $SSH_KEY_FILENAME $SSH_KEY
            chmod 0400 $SSH_KEY_FILENAME
            ls

      - add_ssh_keys:
          fingerprints:
            - "41:ca:62:80:a2:d9:76:d2:b4:1f:2d:00:50:9c:f3:51"

      - run:
          name: kill previous process
          command: |
            ls
            ssh -o "StrictHostKeyChecking no" -i somul-$SSH_KEY_FILENAME $AWS_USERNAME@$AWS_HOST 'PID=`ps -ef | grep 'Python app.py' | grep -v 'grep' | awk '{print $2}'` && kill -9 $PID'


      - run:
          name: delivery artifacts
          command: |
            ssh -o "StrictHostKeyChecking no" -i $SSH_KEY_FILENAME $AWS_USERNAME@$AWS_HOST 'rm -rf $AWS_WORDIR/$AWS_PROJDIR && mkdir $AWS_PROJDIR'
            scp -i $SSH_KEY_FILENAME . $AWS_USERNAME@$AWS_HOST:@$AWS_WORDIR/$AWS_PROJDIR

      - run:
          name: install dependencies on aws
          command: |
            ssh -o "StrictHostKeyChecking no" -i $SSH_KEY_FILENAME $AWS_USERNAME@$AWS_HOST 'cd $AWS_WORDIR/$AWS_PROJDIR && python3 -m venv venv && . venv/bin/activate && pip install -r requirements.txt'

      - run:
          name: run server
          command: |
            ssh -o "StrictHostKeyChecking no" -i $SSH_KEY_FILENAME $AWS_USERNAME@$AWS_HOST 'cd $AWS_WORDIR/$AWS_PROJDIR && python app.py &'

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
#      - run:
#          name: run tests
#          command: |
#            . venv/bin/activate
#            python manage.py test

      - store_test_results:
          path: test-reports/
