# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/flask-restapi-teamtreehouse

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            pwd
            ls
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - run:
          name: get ssh-key
          command: |
            wget -O $SSH_KEY_FILENAME $SSH_KEY
            chmod 0400 $SSH_KEY_FILENAME
            ls

      - add_ssh_keys:
          fingerprints:
            - "41:ca:62:80:a2:d9:76:d2:b4:1f:2d:00:50:9c:f3:51"

      - run:
          name: kill previous process
          command: |
            ssh -o "StrictHostKeyChecking no" -i $SSH_KEY_FILENAME $AWS_USERNAME@$AWS_HOST "
              if
                ps -ef | grep -q '[P]ython app.py';
              then
                echo 'process found'
                PID=`ps -ef | grep 'Python app.py' | grep -v 'grep' | awk '{print $2}'` && kill -9 $PID
              else
                echo 'process not found'
              fi"

      - run:
          name: delivery artifacts
          command: |
            ssh -o "StrictHostKeyChecking no" -i $SSH_KEY_FILENAME $AWS_USERNAME@$AWS_HOST `
              set -e

              # Workaround old docker images with incorrect $HOME
              # check https://github.com/docker/docker/issues/2968 for details
              if [ "${HOME}" = "/" ]
              then
                export HOME=$(getent passwd $(id -un) | cut -d: -f6)
              fi

              mkdir -p ~/.ssh

              echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
                bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
                ' >> ~/.ssh/known_hosts

              (umask 077; touch ~/.ssh/id_rsa)
              chmod 0600 ~/.ssh/id_rsa
              (cat <<EOF > ~/.ssh/id_rsa
                $CHECKOUT_KEY
                EOF
              )

              git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true

              if [ -e /home/circleci/flask-restapi-teamtreehouse/.git ]
              then
                cd /home/circleci/flask-restapi-teamtreehouse
                git remote set-url origin "$CIRCLE_REPOSITORY_URL" || true
              else
                mkdir -p /home/circleci/flask-restapi-teamtreehouse
                cd /home/circleci/flask-restapi-teamtreehouse
                git clone "$CIRCLE_REPOSITORY_URL" .
              fi

              if [ -n "$CIRCLE_TAG" ]
              then
                git fetch --force origin "refs/tags/${CIRCLE_TAG}"
              else
                git fetch --force origin "master:remotes/origin/master"
              fi


              if [ -n "$CIRCLE_TAG" ]
              then
                git reset --hard "$CIRCLE_SHA1"
                git checkout -q "$CIRCLE_TAG"
              elif [ -n "$CIRCLE_BRANCH" ]
              then
                git reset --hard "$CIRCLE_SHA1"
                git checkout -q -B "$CIRCLE_BRANCH"
              fi

              git reset --hard "$CIRCLE_SHA1"
            `

      - run:
          name: install dependencies on aws
          command: |
            ssh -o "StrictHostKeyChecking no" -i $SSH_KEY_FILENAME $AWS_USERNAME@$AWS_HOST "
              cd $AWS_WORKDIR/$AWS_PROJDIR &&
              python3 -m venv venv &&
              . venv/bin/activate &&
              pip install -r requirements.txt"

      - run:
          name: run server
          command: |
            ssh -o "StrictHostKeyChecking no" -i $SSH_KEY_FILENAME $AWS_USERNAME@$AWS_HOST "
              cd $AWS_WORKDIR/$AWS_PROJDIR &&
              python app.py &"

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
#      - run:
#          name: run tests
#          command: |
#            . venv/bin/activate
#            python manage.py test

      - store_test_results:
          path: test-reports/
